#!/bin/zsh

# =====================================
# Support functions
# =====================================
typeset -Ax TUTU_TARGET_LIST=();
typeset -Ax TUTU_TARGET_LIST_RAW

# Get the base directory for the tutu install
function _tutu_base_dir {
    echo ${TUTU_BASE_DIR:=~/.tutu}
}

# Get the full path to the target file
function _tutu_target_path {
    echo "$(_tutu_base_dir)/${TUTU_TARGETS:=targets}";
}

# Load a list of targets and their paths from the targets file.
function _tutu_load_targets {
    target_file_path="$(_tutu_target_path)";
    echo "Loading target list from ${target_file_path}";
    TUTU_TARGET_LIST=();
    TUTU_TARGET_LIST_RAW=();
    while read name target_path; do
        # Skip comments
        if [[ "$name" =~ ^\s*\# ]]; then
          continue;
        fi

        # Skip blank lines
        if [[ "$name" =~ ^\s*$ ]]; then
          continue;
        fi

        echo "Adding: '${name}' => '${target_path}'"
        TUTU_TARGET_LIST[$name]=${~target_path};
        TUTU_TARGET_LIST_RAW[$name]=${target_path};
    done < "$target_file_path";
}

# Cache target list for duration of a single run of the script.
# Each independant invocation of tutu will trigger a fresh read, including file completion.
#
# While this does not seem anywhere near optimal, in practice it seems to be very responsive.
function _tutu_cache_targets {
    # NOTE - testing shows that caching is nearly 100% ineffective.
    # The only time this seems to do anything if a single script execution needs to acess the
    # target list several times.
    # At least part of the issue is that ZSH does not support export of associative arrays.
    # TODO - Need to see if there is a viable way to persist the cache that is any better than just
    # rereading the file.
    # TODO - Need to decide how much of this attempt to cache data we should remove.
    if [ ${#TUTU_TARGET_LIST[@]} -eq 0 ]; then
        _tutu_load_targets > /dev/null
    fi
}
 
# Get a list of target names
function _tutu_list_targets {
    _tutu_cache_targets
    typeset -a targets
    targets=(${(k)TUTU_TARGET_LIST[@]})

    echo "${targets[*]}";
}
 
# Get a target path from a target name
function _tutu_resolve_target {
    _tutu_cache_targets
    echo $TUTU_TARGET_LIST[$1];
}


# =====================================
# Primarty functions
# =====================================

function _tutu() {
    local tu_command="$1"; shift;
    local target="$1";

    if [ -z "$target" ]; then
        _tutu_usage_short
        return 1
    fi
        
    case $target in
        -h|    --help) _tutu_usage     "$@";;

        -a|     --add) _tutu_add       "$@";;
        -e|    --edit) _tutu_edit      "$@";;
        -l|    --list) _tutu_list      "$@";;
        -p|    --path) _tutu_path      "$@";;
        -r| --refresh) _tutu_refresh   "$@";;

                  *) _tutu_jump        "$tu_command" "$@";;
    esac;
}

function _tutu_usage_short () {
    read -r -d '' usage <<END_USAGE
Please supply a target or an option.

Run "tutu --help" for more information.
END_USAGE

    echo "\n$usage\n";
}

function _tutu_usage () {

    read -r -d '' usage <<END_USAGE

Usage: tu/tutu ( --help | --list  ) [args]

Jump to a directory using a short name.

COMMANDS

    tu <target name>

        cd to target directory

    tutu <target name>

        pushd to target directory

    tu --path <target name>

        print the path instead of navigating

    tu --add <target name> <target path>

        Add a new target to the targets file.

        The target path argument is optional and defaults to the current 
        working directory.

    tu --list

        list the defined targets

    tu --edit

        open the targets file in your shell editor

    tu --help

        display this message

    untu

        syntactic sugar for popd


CONFIGURATION

All configuration is kept in the \$TUTU_BASE_DIR which defaults to "~/.tutu".

Targets are specified in \$TUTU_TARGETS file in the configuration directory.
\$TUTU_TARGETS defaults to "targets".

Target lists should be written in two columns, with the first column denoting the
name of the target and the second column denoting the target path.

For example:

  myTarget     ~/some/path/here
  another      /different/path/here
END_USAGE

    echo $usage "\n" | less;
}

function _tutu_add () {
    shift; # Skip the --add

    local target_name=$1; shift;
    local target_path=${1:=$(pwd)}

    if [[ -z $target_path ]]; then
        echo "Please provide a target name and an optional path."
        return
    fi

    local target=$(_tutu_resolve_target "$target_name");
    if [[ ! -z $target ]]; then
        echo "Target '$target_name' already defined as '$target'"
        return
    fi

    echo "Adding '$target_name'..."
    echo $target_name $target_path >> $(_tutu_target_path)
}

function _tutu_edit () {
    local editor=${VISUAL:-${EDITOR:-vi}}

    $editor $(_tutu_target_path)
}

function _tutu_list () {
   local targets=($(_tutu_list_targets))

    for target in $targets; do
        echo "$target";
    done;
}

function _tutu_path () {
    shift;
    local target=$(_tutu_resolve_target "$1");

    if [[ -z $target ]]; then
        echo "Target '$1' not defined. Use one of $(_tutu_list_targets)"
    else
        echo "$target"
    fi
}

function _tutu_jump {
    local command=$1; shift;
    local target=$(_tutu_resolve_target "$1");

    if [[ -z $target ]]; then
        echo "Target '$1' not defined. Use one of $(_tutu_list_targets)"
    else
        echo "($1) => $command $target"
        $command "$target"
    fi
}

# NOTE - this feature is essentially useless at this time.
# Cache does not persist between invocations of tutu, so each run always gets a fresh set of target data.
function _tutu_refresh () {
    _tutu_load_targets
}

# =====================================
# Interface functions
# =====================================

function tu { _tutu "cd" $@ }
function tutu { _tutu "pushd" $@ }
function untu  { popd }
return 0;
